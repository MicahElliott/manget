#! /bin/zsh

# manget -- Fetch and store a remote readme from github repo as local man page.

# TODO support fetching man pages from release dir (like eget does), for maintainers who create them

# Alternative to ronn:
# or use https://github.com/bmoneill/md2roff (golang)
# or https://github.com/cpuguy83/go-md2man

mgver=v2025.10.14
sect=1 # was using 1r but stupid macos man doesn't like it

# host='https://raw.githubusercontent.com'

if   [[ -z $1 || $1 = '--help' ]]
then print 'USAGE: manget owner/proj [exename]'
     print 'Fetch and store a remote readme from github repo as local man page.'
     print '\nExample:'
     print '  manget walles/moor  # get moor pager man page'
     print '  MANGET_DESTDIR=./docs/man manget walles/moor  # store it into local proj dir'
     exit
fi

if [[ $1 = '--version' ]]; then print "manget $mgver"; exit ; fi

repo=$1 # 'walles/moor'

destdirbase=${MANGET_DESTDIR-~/.local/share/man} # or ./docs/man
destdir=$destdirbase/man$sect # append sectioned dir
# destdir=${MANGET_DESTDIR-~/.local/share/man/man$sect} # or ./docs/man/man$sect
# if   [[ -v MANGET_DESTDIR ]]
# then destdir=./docs/man/man$sect
# else destdir=~/.local/share/man/man$sect
# fi
mkdir -p $destdir

# Get main executable name
if [[ -n $2 ]]; then exe=$2; else exe=$1:t; fi # 'moor'
# reldate='XXX' # FIXME get from gh maybe, but unreliable and may not match up
destfile=$destdir/$exe.$sect.gz

print "Determining $exe version"
ver=( $( $exe --version | head -1 ) )
org="${repo:h}Ê¼s $ver[1,4]" # keep just first few items

# Fetch README if necessary and fill contents into text
fetch_readme() {
     # No need  to do this since GH tells us precisely which file is README
     # print 'Determining default branch'
     # mainbranch=$( curl -s "https://api.github.com/repos/$repo" |jq -r '.default_branch' )

     if   [[ -v MANGET_SOURCEDOC ]]
     then sourcepath=$MANGET_SOURCEDOC # can be http... or not for local
          readme=$sourcepath
          if   [[ $sourcepath =~ '^http' ]]
          then print "Fetching source path: $sourcepath"
               text=$( curl --silent $sourcepath )
          else print "Using local source path: $sourcepath"
               text=$( cat $sourcepath)
          fi
     else # https://raw.githubusercontent.com/walles/moor/refs/heads/master/README.md
          print 'Curling github API to determine which file is the README'
          readme=$( curl -s "https://api.github.com/repos/$repo/contents" |
                         grep '"download_url":.*README' |
                         sed -e 's/.*"https:/https:/' -e 's/".*//' | head -1 )
          print "Curling to fetch README: $readme"
          text=$( curl --silent $readme )
     fi
     print "Using README source as: $readme"
}

fetch_readme

ext=${(L)readme:e}
if   [[ $ext =~ '^(md|mkd|markdown)$' ]]
then ftype=md
     # No conversion needed
elif [[ $ext =~ '^(adoc|asciidoc|asc|ad)$' ]]
then ftype=adoc
     print "Converting $ftype to markdown"
     # print "asciidoc -b docbook -o- $text | pandoc -f docbook -t markdown_strict"
     text=$( asciidoc -b docbook -o- - <<<$text | pandoc -f docbook -t markdown_strict )
elif [[ $ext =~ '^(rst|rest)$' ]]
then ftype=rst
     print "Converting $ftype to markdown"
     text=$( pandoc -f rst -t markdown <<<$text )
elif [[ $ext =~ '^(org)$' ]]
then ftype=org
     print "Converting $ftype to markdown"
     text=$( pandoc -f org -t markdown <<<$text )
else print "Unrecognized file type extension: $destfile"
     exit 1
fi

# eget $repo

if   command -v perl >/dev/null 2>&1
then print 'Removing "Installation" section'
     text=$( perl -0777 -pe 's/## install.*?\n## /## /gsi' <<< $text )
fi

if   command -v tldr >/dev/null 2>&1          # check if tldr installed
then if   rawex=$( tldr --raw --quiet $exe )  # check if tldr entry exists
     then print 'Pulling in found TLDR examples for new section'
          examples=$( print "\n\n## EXAMPLES\n\n" )
          examples+=$( sed -r '/^# /,/^> /d' <<< $rawex | sed '1d' )
          text+=$examples
     fi
fi

print 'Upper-casing titles'
text=$( sed -r 's/^## .*/\U&/g' <<< $text )

print 'Running ronn to generate roff'
roff=$( ronn --section $sect -r --name $exe --manual "${(C)exe} README Manual" --organization $org --pipe <<< $text )
# For local generation:
# print -- ronn --section $sect -r --name $exe --manual "${(C)exe} README Manual" --organization $org --pipe >docs/$exe.$sect

print 'Removing slop and tightening bullets'
roff=$( sed -r 's^</?code>^^g'      <<< $roff )
# These aren't working to tighten up bullets
# roff=$( sed    's/"(bu" 4/"(bu" 1/' <<< $roff )
# roff=$( sed '/.IP "" 0/d' <<< $roff )

print "Writing roff: $destfile"
gzip <<< $roff > $destfile

[[ -z $MANPATH ]] && print "You may need to set your MANPATH to $destdirbase"
